{"version":3,"file":"static/js/431.a1afd34e.chunk.js","mappings":"yMACA,GAAgB,KAAO,oB,2BCCjBA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAQ,gCACRC,OAAQ,CACNC,QAAS,mCACTC,SAAU,QACVC,eAAe,KAqCNC,EAAc,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAChB,2BAAAF,EAAAE,KAAA,EACWhB,EAASiB,IADpB,sBACgC,KAAD,EAA/B,OAA+BL,EAAAE,EAAAI,KAAnCL,EAAID,EAAJC,KAAIC,EAAAK,OAAA,SACLN,EAAKO,SAAO,wBAAAN,EAAAO,OAAA,GAAAV,EAAA,KACpB,kBAJ0B,OAAAH,EAAAc,MAAA,KAAAC,UAAA,K,iBCf3B,EAvBa,WAEX,IAAAC,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,IACxBI,EAAAA,EAAAA,YAAU,WACRvB,IAAiBwB,KAAKF,EACxB,GAAG,IAEH,IAAMG,EAAWJ,EAAOK,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAKF,EAALE,MAAOC,EAAKH,EAALG,MAAK,OAC7CC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAAAC,UACLC,EAAAA,EAAAA,MAAA,MAAIC,UAAWC,EAAAA,KAAYH,SAAA,EACzBF,EAAAA,EAAAA,KAAA,MAAAE,SAAKJ,KACLE,EAAAA,EAAAA,KAAA,KAAAE,SAAIH,QAHKF,EAKJ,IAET,OACEM,EAAAA,EAAAA,MAAAG,EAAAA,SAAA,CAAAJ,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,oBACJF,EAAAA,EAAAA,KAAA,MAAII,UAAWC,EAAAA,KAAYH,SAAER,MAGnC,C","sources":["webpack://goit-react-hw-05-movies/./src/modules/TheMovies/Home/home.module.scss?dca0","shared/components/styles/services/TheMoviesAPI.jsx","modules/TheMovies/Home/Home.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"home_list__bEl1U\"};","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: `https://api.themoviedb.org/3/`,\n  params: {\n    api_key: \"6c57fb02719926393bb8c06aa147886f\",\n    language: \"en-US\",\n    include_adult: false,\n  },\n});\n\nexport const searchMovie = async (query, page = 1) => {\n  try {\n    const response = await instance.get(\n      `search/movie?&query=${query}&page=${page}`\n    );\n    // if (genres) {\n    //   await getGenres();\n    // }\n    return {\n      page: response.data.page,\n      totalPages: response.data.total_pages,\n      totalResults: response.data.total_results,\n      results: response.data.results.map((element) => {\n        return {\n          title: element.title,\n          about: element.overview,\n          release: element.release_date,\n          voteAverage: element.vote_average,\n          voteCount: element.vote_count,\n          popularity: element.popularity,\n          id: element.id,\n          // genres: element.genre_ids.map((id) => getGenre(id)),\n          poster: element.poster_path\n            ? `https://image.tmdb.org/t/p/w400${element.poster_path}`\n            : null,\n        };\n      }),\n    };\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const getMostPopular = async () => {\n  const reqURL = `trending/movie/day`;\n  const { data } = await instance.get(reqURL);\n  return data.results;\n};\n\n// export const getGenre = (id) => {\n//   return this.genres.find((element) => element.id === id).name || \"\";\n// };\n\nexport const getFilmInfo = async (movie_id) => {\n  try {\n    const data = await instance\n      .get(`movie/${movie_id}?`)\n      .then((res) => res.data);\n\n    return {\n      title: data.title,\n      originalTitle: data.title,\n      about: data.overview,\n      genres: data.genres.map((genre) => genre.name),\n      release: data.release_date,\n      poster: data.poster_path\n        ? `https://image.tmdb.org/t/p/w400${data.poster_path}`\n        : null,\n      voteAverage: data.vote_average,\n      voteCount: data.vote_count,\n      popularity: data.popularity,\n      id: movie_id,\n    };\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// export default class FilmotekaAPI {\n\n//   async getMostPopular(page = 1, timeWeek) {\n//     try {\n//       const reqURL = `trending/movie/${timeWeek ? 'week' : 'day'}?api_key=${API_KEY}&page=${page}&language=${LANGUAGE}`;\n//       const response = await axios.get(reqURL);\n\n//       if (!this.genres) {\n//         await this.getGenres();\n//       }\n//       return {\n//         page: response.data.page,\n//         totalPages: response.data.total_pages,\n//         totalResults: response.data.total_results,\n//         results: response.data.results.map(element => {\n//           return {\n//             title: element.title,\n//             about: element.overview,\n//             release: element.release_date,\n//             voteAverage: element.vote_average,\n//             voteCount: element.vote_count,\n//             popularity: element.popularity,\n//             id: element.id,\n//             genres: element.genre_ids.map(id => this.getGenre(id)),\n//             poster: element.poster_path ? `https://image.tmdb.org/t/p/w400${element.poster_path}` : null,\n//           };\n//         }),\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async searchMovie(query, page = 1) {\n//     try {\n//       this.query = query;\n//       const response = await axios.get(\n//         `search/movie?api_key=${API_KEY}&query=${this.query}&page=${page}&include_adult=false`,\n//       );\n//       if (!this.genres) {\n//         await this.getGenres();\n//       }\n//       return {\n//         page: response.data.page,\n//         totalPages: response.data.total_pages,\n//         totalResults: response.data.total_results,\n//         results: response.data.results.map(element => {\n//           return {\n//             title: element.title,\n//             about: element.overview,\n//             release: element.release_date,\n//             voteAverage: element.vote_average,\n//             voteCount: element.vote_count,\n//             popularity: element.popularity,\n//             id: element.id,\n//             genres: element.genre_ids.map(id => this.getGenre(id)),\n//             poster: element.poster_path ? `https://image.tmdb.org/t/p/w400${element.poster_path}` : null,\n//           };\n//         }),\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getFilmInfo(movie_id) {\n//     try {\n//       const data = await axios.get(\n//         `movie/${movie_id}?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       ).then(res => res.data);\n\n//       return {\n//         title: data.title,\n//         originalTitle: data.title,\n//         about: data.overview,\n//         genres: data.genres.map(genre => genre.name),\n//         release: data.release_date,\n//         poster: data.poster_path ? `https://image.tmdb.org/t/p/w400${data.poster_path}` : null,\n//         voteAverage: data.vote_average,\n//         voteCount: data.vote_count,\n//         popularity: data.popularity,\n//         id: movie_id,\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getVideo(movie_id) {\n//     try {\n//       if (movie_id) {\n//         this.movie_id = movie_id;\n//       }\n//       const response = await axios.get(\n//         `movie/${this.movie_id}/videos?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       );\n//       const videoID = response.data.results.map(result => result.key).slice(0, 1);\n//       return `https://www.youtube.com/embed/${videoID}`;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   findClosest(x, arr) {\n//     var indexArr = arr.map(function(k) {\n//       return Math.abs(k - x);\n//     });\n//     var min = Math.min.apply(Math, indexArr);\n//     return indexArr.indexOf(min);\n//   }\n\n//   async getPoster(movie_id, posterWidth = 400) {\n//     try {\n//       const response = await axios.get(`movie/${movie_id}/images?api_key=${API_KEY}`);\n//       console.log(response);\n//       const posterArrWidth = response.data.posters.map(poster => poster.width);\n//       const posterID = this.findClosest(posterWidth, posterArrWidth);\n//       const PosterURL = response.data.posters[posterID].file_path;\n//       return `https://image.tmdb.org/t/p/original${PosterURL}`;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getGenres() {\n//     if (this.genres) {\n//       return Promise.resolve(this.genres);\n//     }\n//     try {\n//       const response = await axios.get(\n//         `genre/movie/list?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       );\n//       this.genres = response.data.genres;\n//       return this.genres;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   getGenre = (id) => {\n//     return this.genres.find((element) => element.id === id).name || '';\n//   };\n// }\n","import { useState, useEffect } from \"react\";\nimport styles from \"./home.module.scss\";\n\nimport { getMostPopular } from \"../../../shared/components/styles/services/TheMoviesAPI\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    getMostPopular().then(setMovies);\n  }, []);\n\n  const elements = movies.map(({ id, title, about }) => (\n    <Link key={id}>\n    <li className={styles.item} >\n      <h4>{title}</h4>\n      <p>{about}</p>\n    </li>\n    </Link>\n  ));\n  return (\n    <>\n      <h2>Trending today</h2>\n      <ul className={styles.list}>{elements}</ul>\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["instance","axios","baseURL","params","api_key","language","include_adult","getMostPopular","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee2","_yield$instance$get","data","_context2","prev","next","get","sent","abrupt","results","stop","apply","arguments","_useState","useState","_useState2","_slicedToArray","movies","setMovies","useEffect","then","elements","map","_ref","id","title","about","_jsx","Link","children","_jsxs","className","styles","_Fragment"],"sourceRoot":""}