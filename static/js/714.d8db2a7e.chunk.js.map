{"version":3,"file":"static/js/714.d8db2a7e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/pages/HomePage/homePage.module.scss?b4fd","pages/HomePage/HomePage.jsx","shared/services/TheMoviesAPI.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"homePage_list__1rZKZ\"};","import { useState, useEffect } from 'react';\nimport styles from './homePage.module.scss';\n\nimport { getMostPopular } from '../../shared/services/TheMoviesAPI';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    getMostPopular().then(setMovies);\n  }, []);\n\n  const location = useLocation();\n  const elements = movies.map(({ id, title, about }) => (\n    <li key={id} className={styles.item}>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <h4>{title}</h4>\n        <p>{about}</p>\n      </Link>\n    </li>\n  ));\n  return (\n    <>\n      <h2>Trending today</h2>\n      <ul className={styles.list}>{elements}</ul>\n    </>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: `https://api.themoviedb.org/3/`,\n  params: {\n    api_key: '6c57fb02719926393bb8c06aa147886f',\n    language: 'en-US',\n    // include_adult: false,\n  },\n});\n\nexport const searchMovie = async (query, page = 1) => {\n  const { data } = await instance.get(`search/movie`, {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data.results;\n};\n\nexport const getMostPopular = async () => {\n  const reqURL = `trending/movie/day`;\n  const { data } = await instance.get(reqURL);\n  return data.results;\n};\n\n// export const getGenre = (id) => {\n//   return this.genres.find((element) => element.id === id).name || \"\";\n// };\n\nexport const getFilmInfo = async id => {\n  const { data } = await instance.get(`movie/${id}?`);\n\n  return data;\n};\n\nexport const getCredits = async id => {\n  const { data } = await instance.get(`movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`movie/${id}/reviews?`);\n  return data.results;\n};\n\n\n\n// const findClosest = (x, arr) => {\n//   var indexArr = arr.map(function (k) {\n//     return Math.abs(k - x);\n//   });\n//   var min = Math.min.apply(Math, indexArr);\n//   return indexArr.indexOf(min);\n// };\n\n// export const getPoster = async (id, posterWidth = 400) => {\n//   const { data } = await instance.get(`movie/${id}/images?`);\n//   const posterArrWidth = data.posters.map(poster => poster.width);\n//   const posterID = this.findClosest(posterWidth, posterArrWidth);\n//   const PosterURL = data.posters[posterID].file_path;\n//   return `https://image.tmdb.org/t/p/original${PosterURL}`;\n// };\n\n// export default class FilmotekaAPI {\n\n//   async getMostPopular(page = 1, timeWeek) {\n//     try {\n//       const reqURL = `trending/movie/${timeWeek ? 'week' : 'day'}?api_key=${API_KEY}&page=${page}&language=${LANGUAGE}`;\n//       const response = await axios.get(reqURL);\n\n//       if (!this.genres) {\n//         await this.getGenres();\n//       }\n//       return {\n//         page: response.data.page,\n//         totalPages: response.data.total_pages,\n//         totalResults: response.data.total_results,\n//         results: response.data.results.map(element => {\n//           return {\n//             title: element.title,\n//             about: element.overview,\n//             release: element.release_date,\n//             voteAverage: element.vote_average,\n//             voteCount: element.vote_count,\n//             popularity: element.popularity,\n//             id: element.id,\n//             genres: element.genre_ids.map(id => this.getGenre(id)),\n//             poster: element.poster_path ? `https://image.tmdb.org/t/p/w400${element.poster_path}` : null,\n//           };\n//         }),\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async searchMovie(query, page = 1) {\n//     try {\n//       this.query = query;\n//       const response = await axios.get(\n//         `search/movie?api_key=${API_KEY}&query=${this.query}&page=${page}&include_adult=false`,\n//       );\n//       if (!this.genres) {\n//         await this.getGenres();\n//       }\n//       return {\n//         page: response.data.page,\n//         totalPages: response.data.total_pages,\n//         totalResults: response.data.total_results,\n//         results: response.data.results.map(element => {\n//           return {\n//             title: element.title,\n//             about: element.overview,\n//             release: element.release_date,\n//             voteAverage: element.vote_average,\n//             voteCount: element.vote_count,\n//             popularity: element.popularity,\n//             id: element.id,\n//             genres: element.genre_ids.map(id => this.getGenre(id)),\n//             poster: element.poster_path ? `https://image.tmdb.org/t/p/w400${element.poster_path}` : null,\n//           };\n//         }),\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getFilmInfo(movie_id) {\n//     try {\n//       const data = await axios.get(\n//         `movie/${movie_id}?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       ).then(res => res.data);\n\n//       return {\n//         title: data.title,\n//         originalTitle: data.title,\n//         about: data.overview,\n//         genres: data.genres.map(genre => genre.name),\n//         release: data.release_date,\n//         poster: data.poster_path ? `https://image.tmdb.org/t/p/w400${data.poster_path}` : null,\n//         voteAverage: data.vote_average,\n//         voteCount: data.vote_count,\n//         popularity: data.popularity,\n//         id: movie_id,\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getVideo(movie_id) {\n//     try {\n//       if (movie_id) {\n//         this.movie_id = movie_id;\n//       }\n//       const response = await axios.get(\n//         `movie/${this.movie_id}/videos?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       );\n//       const videoID = response.data.results.map(result => result.key).slice(0, 1);\n//       return `https://www.youtube.com/embed/${videoID}`;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   findClosest(x, arr) {\n//     var indexArr = arr.map(function(k) {\n//       return Math.abs(k - x);\n//     });\n//     var min = Math.min.apply(Math, indexArr);\n//     return indexArr.indexOf(min);\n//   }\n\n//   async getPoster(movie_id, posterWidth = 400) {\n//     try {\n//       const response = await axios.get(`movie/${movie_id}/images?api_key=${API_KEY}`);\n//       console.log(response);\n//       const posterArrWidth = response.data.posters.map(poster => poster.width);\n//       const posterID = this.findClosest(posterWidth, posterArrWidth);\n//       const PosterURL = response.data.posters[posterID].file_path;\n//       return `https://image.tmdb.org/t/p/original${PosterURL}`;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getGenres() {\n//     if (this.genres) {\n//       return Promise.resolve(this.genres);\n//     }\n//     try {\n//       const response = await axios.get(\n//         `genre/movie/list?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       );\n//       this.genres = response.data.genres;\n//       return this.genres;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   getGenre = (id) => {\n//     return this.genres.find((element) => element.id === id).name || '';\n//   };\n// }\n"],"names":["_useState","useState","_useState2","_slicedToArray","movies","setMovies","useEffect","getMostPopular","then","location","useLocation","elements","map","_ref","id","title","about","_jsx","className","styles","children","_jsxs","Link","to","concat","state","from","_Fragment","instance","axios","baseURL","params","api_key","language","searchMovie","_asyncToGenerator","_regeneratorRuntime","_callee","query","page","_yield$instance$get","data","_args","arguments","_context","prev","next","length","undefined","get","sent","abrupt","results","stop","_x","apply","_ref2","_callee2","_yield$instance$get2","_context2","getFilmInfo","_ref3","_callee3","_yield$instance$get3","_context3","_x2","getCredits","_ref4","_callee4","_yield$instance$get4","_context4","cast","_x3","getReviews","_ref5","_callee5","_yield$instance$get5","_context5","_x4"],"sourceRoot":""}