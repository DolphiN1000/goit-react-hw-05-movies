{"version":3,"file":"static/js/105.5d961aba.chunk.js","mappings":"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","sources":["pages/MoviesPage/MovieSearchForm/initialState.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","shared/hoks/useForm.jsx","pages/MoviesPage/MovieSearchForm/movieSearchForm.module.scss","pages/MoviesPage/MovieSearchForm/MovieSearchForm.jsx","shared/components/MoviesList/moviesList.module.scss","shared/components/MoviesList/MoviesList.jsx","pages/MoviesPage/MovieSearch/movieSearch.module.scss","pages/MoviesPage/MovieSearch/MovieSearch.jsx","pages/MoviesPage/MoviePage.jsx","shared/services/TheMoviesAPI.jsx"],"sourcesContent":["const initialState = {\n    search: \"\"\n}\n\nexport default initialState;","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","\nimport { useState, useCallback } from \"react\";\n\nconst useForm = ({initialState, onSubmit})=> {\n    const [state, setState] = useState({...initialState})\n\n    const handleChange = useCallback(({target}) => {\n        const {name, value} = target;\n        setState(prevState => {\n            return {...prevState, [name]: value}\n        })\n    }, [setState]);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;","// extracted by mini-css-extract-plugin\nexport default {};","import { memo } from 'react';\nimport useForm from 'shared/hoks/useForm';\nimport styles from './movieSearchForm.module.scss';\nimport PropTypes from 'prop-types';\n\n\nconst MovieSearchForm = ({initialState, onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const{search} = state;\n  \n    return (\n    <>\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"\">Search movie</label>\n        <input\n          value={search}\n          onChange={handleChange}\n          name=\"search\"\n          placeholder=\"Search movie\"\n          required\n        />\n        <button type=\"submit\">Search</button>\n      </div>\n    </form>\n    </>\n  );\n};\n\nexport default memo(MovieSearchForm);\n\nMovieSearchForm.defaultProps = {\n  initialState: {\n    search: ''\n  }\n}\n\nMovieSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {};","import { memo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport styles from './moviesList.module.scss';\n\nconst MovieList = ({ items }) => {\n  const location = useLocation();\n\n  const elements = items.map(({ id, title }) => (\n    <Link\n      className={styles.link}\n      key={id}\n      to={`/movies/${id}`}\n      state={{ from: location }}\n    >\n      <li className={styles.item}>\n        <h4>{title}</h4>\n      </li>\n    </Link>\n  ));\n\n  return <ul className={styles.list}>{elements}</ul>;\n};\n\nexport default memo(MovieList);\n\nMovieList.defaultProps = {\n  items: [],\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useCallback, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovie } from 'shared/services/TheMoviesAPI';\nimport initialState from '../MovieSearchForm/initialState';\nimport MovieSearchForm from '../MovieSearchForm/MovieSearchForm';\nimport MoviesList from 'shared/components/MoviesList/MoviesList';\nimport { FidgetSpinner } from 'react-loader-spinner';\n\nimport styles from './movieSearch.module.scss'\n\nconst MovieSearch = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('search');\n  const page = searchParams.get('page');\n\n  useEffect(() => {\n    if (!search) {\n      return;\n    }\n\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        const result = await searchMovie(search, page);\n        setItems(prevItems => ([...prevItems, ...result]));\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [search, setItems, page, setLoading, setError]);\n\n  const onSearchMovie = useCallback(\n    ({ search }) => {\n      setSearchParams({ search, page: 1 });\n      setItems([]);\n    },\n    [ setSearchParams]\n  );\n\n  const loadMore = useCallback(() => {\n    setSearchParams({ search, page: Number(page) + 1 });\n  }, [search, page, setSearchParams]);\n\n  return (\n    <>\n      <MovieSearchForm initialState={initialState} onSubmit={onSearchMovie} />\n      <MoviesList items={items} />\n      {loading && (\n        <FidgetSpinner\n          visible={true}\n          height=\"200\"\n          width=\"200\"\n          ariaLabel=\"dna-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"dna-wrapper\"\n          ballColors={['#ff0000', '#00ff00', '#0000ff']}\n          backgroundColor=\"#F4442E\"\n        />\n      )}\n      {error && <p className={styles.errorMessage}>{error}</p>}\n      {Boolean(items.length) && <button onClick={loadMore}>Load more</button>}    </>\n  );\n};\nexport default MovieSearch;\n","import MovieSearch from './MovieSearch/MovieSearch';\n\n// import styles from './moviePage.module.scss';\n\n\nconst MoviesPage = () => {\n\n  return (\n    <>\n      <MovieSearch />\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: `https://api.themoviedb.org/3/`,\n  params: {\n    api_key: '6c57fb02719926393bb8c06aa147886f',\n    language: 'en-US',\n    // include_adult: false,\n  },\n});\n\nexport const searchMovie = async (query, page = 1) => {\n  const { data } = await instance.get(`search/movie`, {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data.results;\n};\n\nexport const getMostPopular = async () => {\n  const reqURL = `trending/movie/day`;\n  const { data } = await instance.get(reqURL);\n  return data.results;\n};\n\n// export const getGenre = (id) => {\n//   return this.genres.find((element) => element.id === id).name || \"\";\n// };\n\nexport const getFilmInfo = async id => {\n  const { data } = await instance.get(`movie/${id}?`);\n\n  return data;\n};\n\nexport const getCredits = async id => {\n  const { data } = await instance.get(`movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`movie/${id}/reviews?`);\n  return data.results;\n};\n\n\n\n// const findClosest = (x, arr) => {\n//   var indexArr = arr.map(function (k) {\n//     return Math.abs(k - x);\n//   });\n//   var min = Math.min.apply(Math, indexArr);\n//   return indexArr.indexOf(min);\n// };\n\n// export const getPoster = async (id, posterWidth = 400) => {\n//   const { data } = await instance.get(`movie/${id}/images?`);\n//   const posterArrWidth = data.posters.map(poster => poster.width);\n//   const posterID = this.findClosest(posterWidth, posterArrWidth);\n//   const PosterURL = data.posters[posterID].file_path;\n//   return `https://image.tmdb.org/t/p/original${PosterURL}`;\n// };\n\n// export default class FilmotekaAPI {\n\n//   async getMostPopular(page = 1, timeWeek) {\n//     try {\n//       const reqURL = `trending/movie/${timeWeek ? 'week' : 'day'}?api_key=${API_KEY}&page=${page}&language=${LANGUAGE}`;\n//       const response = await axios.get(reqURL);\n\n//       if (!this.genres) {\n//         await this.getGenres();\n//       }\n//       return {\n//         page: response.data.page,\n//         totalPages: response.data.total_pages,\n//         totalResults: response.data.total_results,\n//         results: response.data.results.map(element => {\n//           return {\n//             title: element.title,\n//             about: element.overview,\n//             release: element.release_date,\n//             voteAverage: element.vote_average,\n//             voteCount: element.vote_count,\n//             popularity: element.popularity,\n//             id: element.id,\n//             genres: element.genre_ids.map(id => this.getGenre(id)),\n//             poster: element.poster_path ? `https://image.tmdb.org/t/p/w400${element.poster_path}` : null,\n//           };\n//         }),\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async searchMovie(query, page = 1) {\n//     try {\n//       this.query = query;\n//       const response = await axios.get(\n//         `search/movie?api_key=${API_KEY}&query=${this.query}&page=${page}&include_adult=false`,\n//       );\n//       if (!this.genres) {\n//         await this.getGenres();\n//       }\n//       return {\n//         page: response.data.page,\n//         totalPages: response.data.total_pages,\n//         totalResults: response.data.total_results,\n//         results: response.data.results.map(element => {\n//           return {\n//             title: element.title,\n//             about: element.overview,\n//             release: element.release_date,\n//             voteAverage: element.vote_average,\n//             voteCount: element.vote_count,\n//             popularity: element.popularity,\n//             id: element.id,\n//             genres: element.genre_ids.map(id => this.getGenre(id)),\n//             poster: element.poster_path ? `https://image.tmdb.org/t/p/w400${element.poster_path}` : null,\n//           };\n//         }),\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getFilmInfo(movie_id) {\n//     try {\n//       const data = await axios.get(\n//         `movie/${movie_id}?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       ).then(res => res.data);\n\n//       return {\n//         title: data.title,\n//         originalTitle: data.title,\n//         about: data.overview,\n//         genres: data.genres.map(genre => genre.name),\n//         release: data.release_date,\n//         poster: data.poster_path ? `https://image.tmdb.org/t/p/w400${data.poster_path}` : null,\n//         voteAverage: data.vote_average,\n//         voteCount: data.vote_count,\n//         popularity: data.popularity,\n//         id: movie_id,\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getVideo(movie_id) {\n//     try {\n//       if (movie_id) {\n//         this.movie_id = movie_id;\n//       }\n//       const response = await axios.get(\n//         `movie/${this.movie_id}/videos?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       );\n//       const videoID = response.data.results.map(result => result.key).slice(0, 1);\n//       return `https://www.youtube.com/embed/${videoID}`;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   findClosest(x, arr) {\n//     var indexArr = arr.map(function(k) {\n//       return Math.abs(k - x);\n//     });\n//     var min = Math.min.apply(Math, indexArr);\n//     return indexArr.indexOf(min);\n//   }\n\n//   async getPoster(movie_id, posterWidth = 400) {\n//     try {\n//       const response = await axios.get(`movie/${movie_id}/images?api_key=${API_KEY}`);\n//       console.log(response);\n//       const posterArrWidth = response.data.posters.map(poster => poster.width);\n//       const posterID = this.findClosest(posterWidth, posterArrWidth);\n//       const PosterURL = response.data.posters[posterID].file_path;\n//       return `https://image.tmdb.org/t/p/original${PosterURL}`;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getGenres() {\n//     if (this.genres) {\n//       return Promise.resolve(this.genres);\n//     }\n//     try {\n//       const response = await axios.get(\n//         `genre/movie/list?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       );\n//       this.genres = response.data.genres;\n//       return this.genres;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   getGenre = (id) => {\n//     return this.genres.find((element) => element.id === id).name || '';\n//   };\n// }\n"],"names":["search","_defineProperty","obj","key","value","toPropertyKey","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_ref","initialState","onSubmit","_useState","useState","_objectSpread","_useState2","_slicedToArray","state","setState","handleChange","useCallback","_ref2","name","prevState","handleSubmit","e","preventDefault","MovieSearchForm","_useForm","useForm","_jsx","_Fragment","children","className","styles","_jsxs","htmlFor","onChange","placeholder","required","type","memo","defaultProps","MovieList","items","location","useLocation","elements","map","id","title","Link","to","concat","from","setItems","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","get","page","useEffect","fetchMovie","_asyncToGenerator","_regeneratorRuntime","_callee","result","_context","prev","next","searchMovie","sent","prevItems","_toConsumableArray","t0","message","finish","stop","onSearchMovie","loadMore","Number","MoviesList","FidgetSpinner","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","ballColors","backgroundColor","Boolean","onClick","MovieSearch","instance","axios","baseURL","params","api_key","language","query","_yield$instance$get","data","_args","undefined","abrupt","results","_x","getMostPopular","_callee2","_yield$instance$get2","_context2","getFilmInfo","_ref3","_callee3","_yield$instance$get3","_context3","_x2","getCredits","_ref4","_callee4","_yield$instance$get4","_context4","cast","_x3","getReviews","_ref5","_callee5","_yield$instance$get5","_context5","_x4"],"sourceRoot":""}