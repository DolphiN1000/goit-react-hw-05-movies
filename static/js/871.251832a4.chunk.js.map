{"version":3,"file":"static/js/871.251832a4.chunk.js","mappings":"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","sources":["pages/Reviews/Reviews.jsx","shared/services/TheMoviesAPI.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'shared/services/TheMoviesAPI';\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const result = await getReviews(id);\n        setReviews(result);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchReviews();\n  }, [id]);\n  const elements = reviews.map(({ id, author, content }) => (\n    <li key={id}>\n      <p>{author}</p>\n      <p>{content}</p>\n    </li>\n  ));\n  return (\n    <ul>\n      {elements.length !== 0\n        ? elements\n        : 'We don`t have any reviews for this movie'}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: `https://api.themoviedb.org/3/`,\n  params: {\n    api_key: '6c57fb02719926393bb8c06aa147886f',\n    language: 'en-US',\n    // include_adult: false,\n  },\n});\n\nexport const searchMovie = async (query, page = 1) => {\n  const { data } = await instance.get(`search/movie`, {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data.results;\n};\n\nexport const getMostPopular = async () => {\n  const reqURL = `trending/movie/day`;\n  const { data } = await instance.get(reqURL);\n  return data.results;\n};\n\n// export const getGenre = (id) => {\n//   return this.genres.find((element) => element.id === id).name || \"\";\n// };\n\nexport const getFilmInfo = async id => {\n  const { data } = await instance.get(`movie/${id}?`);\n\n  return data;\n};\n\nexport const getCredits = async id => {\n  const { data } = await instance.get(`movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`movie/${id}/reviews?`);\n  return data.results;\n};\n\n\n\n// const findClosest = (x, arr) => {\n//   var indexArr = arr.map(function (k) {\n//     return Math.abs(k - x);\n//   });\n//   var min = Math.min.apply(Math, indexArr);\n//   return indexArr.indexOf(min);\n// };\n\n// export const getPoster = async (id, posterWidth = 400) => {\n//   const { data } = await instance.get(`movie/${id}/images?`);\n//   const posterArrWidth = data.posters.map(poster => poster.width);\n//   const posterID = this.findClosest(posterWidth, posterArrWidth);\n//   const PosterURL = data.posters[posterID].file_path;\n//   return `https://image.tmdb.org/t/p/original${PosterURL}`;\n// };\n\n// export default class FilmotekaAPI {\n\n//   async getMostPopular(page = 1, timeWeek) {\n//     try {\n//       const reqURL = `trending/movie/${timeWeek ? 'week' : 'day'}?api_key=${API_KEY}&page=${page}&language=${LANGUAGE}`;\n//       const response = await axios.get(reqURL);\n\n//       if (!this.genres) {\n//         await this.getGenres();\n//       }\n//       return {\n//         page: response.data.page,\n//         totalPages: response.data.total_pages,\n//         totalResults: response.data.total_results,\n//         results: response.data.results.map(element => {\n//           return {\n//             title: element.title,\n//             about: element.overview,\n//             release: element.release_date,\n//             voteAverage: element.vote_average,\n//             voteCount: element.vote_count,\n//             popularity: element.popularity,\n//             id: element.id,\n//             genres: element.genre_ids.map(id => this.getGenre(id)),\n//             poster: element.poster_path ? `https://image.tmdb.org/t/p/w400${element.poster_path}` : null,\n//           };\n//         }),\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async searchMovie(query, page = 1) {\n//     try {\n//       this.query = query;\n//       const response = await axios.get(\n//         `search/movie?api_key=${API_KEY}&query=${this.query}&page=${page}&include_adult=false`,\n//       );\n//       if (!this.genres) {\n//         await this.getGenres();\n//       }\n//       return {\n//         page: response.data.page,\n//         totalPages: response.data.total_pages,\n//         totalResults: response.data.total_results,\n//         results: response.data.results.map(element => {\n//           return {\n//             title: element.title,\n//             about: element.overview,\n//             release: element.release_date,\n//             voteAverage: element.vote_average,\n//             voteCount: element.vote_count,\n//             popularity: element.popularity,\n//             id: element.id,\n//             genres: element.genre_ids.map(id => this.getGenre(id)),\n//             poster: element.poster_path ? `https://image.tmdb.org/t/p/w400${element.poster_path}` : null,\n//           };\n//         }),\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getFilmInfo(movie_id) {\n//     try {\n//       const data = await axios.get(\n//         `movie/${movie_id}?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       ).then(res => res.data);\n\n//       return {\n//         title: data.title,\n//         originalTitle: data.title,\n//         about: data.overview,\n//         genres: data.genres.map(genre => genre.name),\n//         release: data.release_date,\n//         poster: data.poster_path ? `https://image.tmdb.org/t/p/w400${data.poster_path}` : null,\n//         voteAverage: data.vote_average,\n//         voteCount: data.vote_count,\n//         popularity: data.popularity,\n//         id: movie_id,\n//       };\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getVideo(movie_id) {\n//     try {\n//       if (movie_id) {\n//         this.movie_id = movie_id;\n//       }\n//       const response = await axios.get(\n//         `movie/${this.movie_id}/videos?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       );\n//       const videoID = response.data.results.map(result => result.key).slice(0, 1);\n//       return `https://www.youtube.com/embed/${videoID}`;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   findClosest(x, arr) {\n//     var indexArr = arr.map(function(k) {\n//       return Math.abs(k - x);\n//     });\n//     var min = Math.min.apply(Math, indexArr);\n//     return indexArr.indexOf(min);\n//   }\n\n//   async getPoster(movie_id, posterWidth = 400) {\n//     try {\n//       const response = await axios.get(`movie/${movie_id}/images?api_key=${API_KEY}`);\n//       console.log(response);\n//       const posterArrWidth = response.data.posters.map(poster => poster.width);\n//       const posterID = this.findClosest(posterWidth, posterArrWidth);\n//       const PosterURL = response.data.posters[posterID].file_path;\n//       return `https://image.tmdb.org/t/p/original${PosterURL}`;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   async getGenres() {\n//     if (this.genres) {\n//       return Promise.resolve(this.genres);\n//     }\n//     try {\n//       const response = await axios.get(\n//         `genre/movie/list?api_key=${API_KEY}&language=${LANGUAGE}`,\n//       );\n//       this.genres = response.data.genres;\n//       return this.genres;\n//     } catch (error) {\n//       throw new Error(error.message);\n//     }\n//   }\n\n//   getGenre = (id) => {\n//     return this.genres.find((element) => element.id === id).name || '';\n//   };\n// }\n"],"names":["_useState","useState","_useState2","_slicedToArray","reviews","setReviews","id","useParams","useEffect","fetchReviews","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","result","_context","prev","next","getReviews","sent","t0","console","log","message","stop","apply","arguments","elements","map","_ref2","author","content","_jsxs","children","_jsx","length","instance","axios","baseURL","params","api_key","language","searchMovie","query","page","_yield$instance$get","data","_args","undefined","get","abrupt","results","_x","getMostPopular","_callee2","_yield$instance$get2","_context2","getFilmInfo","_ref3","_callee3","_yield$instance$get3","_context3","concat","_x2","getCredits","_ref4","_callee4","_yield$instance$get4","_context4","cast","_x3","_ref5","_callee5","_yield$instance$get5","_context5","_x4"],"sourceRoot":""}